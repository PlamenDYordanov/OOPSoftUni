Robert Martin (uncle bob) - Clean Code, clean architecture (books). 
S - Single responsibility (Един клас или метод трябва да отговаря за една концепция, а променливата за едно нещо)
O - Oper/Closed (Написания от нас код трябва лесно да се разширява без да променяме вече написания.)
L - Liskov substitution (Връзкате между бащиния и  класа наследникa трябва да отговаря на "IS A". В интерфейсите може да напишем повече от един метод, но трябва да сме сигурни, че всичките ще се ползват надолу в логиката).
I - Interface Segregation (Един интерфейс трябва да отговаря за нещо, което е свързано с него и не трябва да бъде обширен)
D - Dependency Inversion (Нашия код трябва да зависи от абстракция. Не трябва да нарушаваме Polymorphism
The general idea of this principle is as simple as it is important:
High-level modules, which provide complex logic, 
should be easily reusable and unaffected by changes in low-level 
modules, which provide utility features. 
To achieve that, you need to introduce an abstraction that decouples
 the high-level and low-level modules from each other.)

